/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.cubedb.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class CubeDBFunc implements TBase<CubeDBFunc, CubeDBFunc._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CubeDBFunc");

  private static final TField CLASS_NAME_FIELD_DESC = new TField("className", TType.STRING, (short)1);
  private static final TField CONTEXT_FIELD_DESC = new TField("context", TType.MAP, (short)2);
  private static final TField KEYS_INFO_FIELD_DESC = new TField("keysInfo", TType.MAP, (short)3);


  public String className;
  public Map<String,String> context;
  public Map<String,String> keysInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CLASS_NAME((short)1, "className"),
    CONTEXT((short)2, "context"),
    KEYS_INFO((short)3, "keysInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS_NAME
          return CLASS_NAME;
        case 2: // CONTEXT
          return CONTEXT;
        case 3: // KEYS_INFO
          return KEYS_INFO;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS_NAME, new FieldMetaData("className", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CONTEXT, new FieldMetaData("context", TFieldRequirementType.OPTIONAL,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.KEYS_INFO, new FieldMetaData("keysInfo", TFieldRequirementType.OPTIONAL,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CubeDBFunc.class, metaDataMap);
  }


  public CubeDBFunc() {
    this.className = "";
  }

  public CubeDBFunc(
    String className)
  {
    this();
    this.className = className;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CubeDBFunc(CubeDBFunc other) {
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetContext()) {
      Map<String,String> __this__context = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.context.entrySet()) {
        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();
        String __this__context_copy_key = other_element_key;
        String __this__context_copy_value = other_element_value;
        __this__context.put(__this__context_copy_key, __this__context_copy_value);
      }
      this.context = __this__context;
    }
    if (other.isSetKeysInfo()) {
      Map<String,String> __this__keysInfo = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.keysInfo.entrySet()) {
        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();
        String __this__keysInfo_copy_key = other_element_key;
        String __this__keysInfo_copy_value = other_element_value;
        __this__keysInfo.put(__this__keysInfo_copy_key, __this__keysInfo_copy_value);
      }
      this.keysInfo = __this__keysInfo;
    }
  }

  public CubeDBFunc deepCopy() {
    return new CubeDBFunc(this);
  }

  @java.lang.Override
  public void clear() {
    this.className = "";
    this.context = null;
    this.keysInfo = null;
  }

  public String getClassName() {
    return this.className;
  }

  public CubeDBFunc setClassName(String className) {
    this.className = className;
    
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been asigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public int getContextSize() {
    return (this.context == null) ? 0 : this.context.size();
  }

  public void putToContext(String key, String val) {
    if (this.context == null) {
      this.context = new HashMap<String,String>();
    }
    this.context.put(key, val);
  }

  public Map<String,String> getContext() {
    return this.context;
  }

  public CubeDBFunc setContext(Map<String,String> context) {
    this.context = context;
    
    return this;
  }

  public void unsetContext() {
    this.context = null;
  }

  /** Returns true if field context is set (has been asigned a value) and false otherwise */
  public boolean isSetContext() {
    return this.context != null;
  }

  public void setContextIsSet(boolean value) {
    if (!value) {
      this.context = null;
    }
  }

  public int getKeysInfoSize() {
    return (this.keysInfo == null) ? 0 : this.keysInfo.size();
  }

  public void putToKeysInfo(String key, String val) {
    if (this.keysInfo == null) {
      this.keysInfo = new HashMap<String,String>();
    }
    this.keysInfo.put(key, val);
  }

  public Map<String,String> getKeysInfo() {
    return this.keysInfo;
  }

  public CubeDBFunc setKeysInfo(Map<String,String> keysInfo) {
    this.keysInfo = keysInfo;
    
    return this;
  }

  public void unsetKeysInfo() {
    this.keysInfo = null;
  }

  /** Returns true if field keysInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetKeysInfo() {
    return this.keysInfo != null;
  }

  public void setKeysInfoIsSet(boolean value) {
    if (!value) {
      this.keysInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;
    case CONTEXT:
      if (value == null) {
        unsetContext();
      } else {
        setContext((Map<String,String>)value);
      }
      break;
    case KEYS_INFO:
      if (value == null) {
        unsetKeysInfo();
      } else {
        setKeysInfo((Map<String,String>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS_NAME:
      return getClassName();
    case CONTEXT:
      return getContext();
    case KEYS_INFO:
      return getKeysInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASS_NAME:
      return isSetClassName();
    case CONTEXT:
      return isSetContext();
    case KEYS_INFO:
      return isSetKeysInfo();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CubeDBFunc)
      return this.equals((CubeDBFunc)that);
    return false;
  }

  public boolean equals(CubeDBFunc that) {
    if (that == null)
      return false;
    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }
    boolean this_present_context = true && this.isSetContext();
    boolean that_present_context = true && that.isSetContext();
    if (this_present_context || that_present_context) {
      if (!(this_present_context && that_present_context))
        return false;
      if (!this.context.equals(that.context))
        return false;
    }
    boolean this_present_keysInfo = true && this.isSetKeysInfo();
    boolean that_present_keysInfo = true && that.isSetKeysInfo();
    if (this_present_keysInfo || that_present_keysInfo) {
      if (!(this_present_keysInfo && that_present_keysInfo))
        return false;
      if (!this.keysInfo.equals(that.keysInfo))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_className = true && (isSetClassName());
    builder.append(present_className);
    if (present_className)
      builder.append(className);
    boolean present_context = true && (isSetContext());
    builder.append(present_context);
    if (present_context)
      builder.append(context);
    boolean present_keysInfo = true && (isSetKeysInfo());
    builder.append(present_keysInfo);
    if (present_keysInfo)
      builder.append(keysInfo);
    return builder.toHashCode();
  }

  public int compareTo(CubeDBFunc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CubeDBFunc typedOther = (CubeDBFunc)other;

    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = TBaseHelper.compareTo(this.className, typedOther.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext()) {
      lastComparison = TBaseHelper.compareTo(this.context, typedOther.context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeysInfo()).compareTo(typedOther.isSetKeysInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeysInfo()) {
      lastComparison = TBaseHelper.compareTo(this.keysInfo, typedOther.keysInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CLASS_NAME
          if (field.type == TType.STRING) {
            this.className = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CONTEXT
          if (field.type == TType.MAP) {
            {
            TMap _map9 = iprot.readMapBegin();
            this.context = new HashMap<String,String>(2*_map9.size);
            for (int _i10 = 0; _i10 < _map9.size; ++_i10)
            {
              String _key11;
              String _val12;
              _key11 = iprot.readString();
              _val12 = iprot.readString();
              this.context.put(_key11, _val12);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // KEYS_INFO
          if (field.type == TType.MAP) {
            {
            TMap _map13 = iprot.readMapBegin();
            this.keysInfo = new HashMap<String,String>(2*_map13.size);
            for (int _i14 = 0; _i14 < _map13.size; ++_i14)
            {
              String _key15;
              String _val16;
              _key15 = iprot.readString();
              _val16 = iprot.readString();
              this.keysInfo.put(_key15, _val16);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.className != null) {
      oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
      oprot.writeString(this.className);
      oprot.writeFieldEnd();
    }
    if (this.context != null) {
      if (isSetContext()) {
        oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.context.size()));
          for (Map.Entry<String, String> _iter17 : this.context.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeString(_iter17.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.keysInfo != null) {
      if (isSetKeysInfo()) {
        oprot.writeFieldBegin(KEYS_INFO_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.keysInfo.size()));
          for (Map.Entry<String, String> _iter18 : this.keysInfo.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CubeDBFunc(");
    boolean first = true;
    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (isSetContext()) {
      if (!first) sb.append(", ");
      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      }
    if (isSetKeysInfo()) {
      if (!first) sb.append(", ");
      sb.append("keysInfo:");
      if (this.keysInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.keysInfo);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (className == null) {
      throw new TProtocolException("Required field 'className' was not present! Struct: " + toString());
    }
  }
}

